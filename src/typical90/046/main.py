#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]", B: "List[int]", C: "List[int]"):
    A = [i % 46 for i in A]
    AM = [0 for i in range(46)]
    for a in A:
        AM[a] += 1

    B = [i % 46 for i in B]
    BM = [0 for i in range(46)]
    for b in B:
        BM[b] += 1
    C = [i % 46 for i in C]
    CM = [0 for i in range(46)]
    for c in C:
        CM[c] += 1

    ret = 0
    for i in range(46):
        for j in range(46):
            for k in range(46):
                if (i + j + k) % 46 == 0:
                    ret += AM[i] * BM[j] * CM[k]

    print(ret)

    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    B = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    C = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A, B, C)

if __name__ == '__main__':
    main()
