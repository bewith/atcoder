#!/usr/bin/env python3
import sys


def solve(N: int, C: "List[int]", P: "List[int]", Q: int, L: "List[int]", R: "List[int]"):
    C1 = [0] * N
    C2 = [0] * N
    for i in range(N):
        if i == 0:
            if C[i] == 1:
                C1[i] = P[i]
            else:
                C2[i] = P[i]
        else:
            if C[i] == 1:
                C1[i] = P[i] + C1[i - 1]
                C2[i] = C2[i - 1]
            else:
                C1[i] = C1[i - 1]
                C2[i] = P[i] + C2[i - 1]

    T1 = [0] * Q
    T2 = [0] * Q
    for j in range(Q):
        if L[j] == 1:
            T1[j] = C1[R[j] - 1]
            T2[j] = C2[R[j] - 1]
        else:
            T1[j] = C1[R[j] - 1] - C1[L[j] - 2]
            T2[j] = C2[R[j] - 1] - C2[L[j] - 2]

    for j in range(Q):
        print(T1[j], T2[j])

    return


# Generated by 2.3.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    C = [int()] * (N)  # type: "List[int]"
    P = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        C[i] = int(next(tokens))
        P[i] = int(next(tokens))
    Q = int(next(tokens))  # type: int
    L = [int()] * (Q)  # type: "List[int]"
    R = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
    solve(N, C, P, Q, L, R)

if __name__ == '__main__':
    main()
