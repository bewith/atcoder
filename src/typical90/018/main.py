#!/usr/bin/env python3
import sys
import numpy as np
import math


def solve(T: int, L: int, X: int, Y: int, Q: int, E: "List[int]"):
    for e in E:
        yzRadians = math.radians(360 * e / T)
        z = (L / 2 * math.cos(yzRadians) - L / 2) * -1
        y = (L / 2 * math.sin(yzRadians)) * -1

        if y == 0 and z == 0:
            print(0)
            continue

        posA = [X, Y, 0] # Chokudai
        posB = [0, y, z] # 観覧車の場所
        posC = [X, Y, z]

        print(degree(posA, posB, posC))
    return

def degree(a, b, c):
    a = np.array(a)
    b = np.array(b)
    c = np.array(c)
    # ベクトルを定義
    vec_a = a - b
    vec_c = c - b

    # コサインの計算
    length_vec_a = np.linalg.norm(vec_a)
    length_vec_c = np.linalg.norm(vec_c)
    inner_product = np.inner(vec_a, vec_c)
    cos = inner_product / (length_vec_a * length_vec_c)

    # 角度（ラジアン）の計算
    rad = np.arccos(cos)

    # 弧度法から度数法（rad ➔ 度）への変換
    degree = np.rad2deg(rad)
    return degree

# Generated by 2.3.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    T = int(next(tokens))  # type: int
    L = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    E = [int(next(tokens)) for _ in range(Q)]  # type: "List[int]"
    solve(T, L, X, Y, Q, E)

if __name__ == '__main__':
    main()
