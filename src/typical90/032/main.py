#!/usr/bin/env python3
import sys
import copy

def loop(ar, r, trace):
    if len(r) == 0:
        ar.append(trace)
        return 
    for a in r:
        tmpr = copy.copy(r)
        tmpr.remove(a)
        loop(ar, tmpr, trace + str(a))

def solve(N: int, A: "List[List[int]]", M: int, X: "List[int]", Y: "List[int]"):
    r1 = [i for i in range(N)]
    ar = []
    loop(ar, r1, "")

    ok = []
    for a in ar:
        okFlg = True
        for m in range(M):
            if not(judge(a, X[m] - 1, Y[m] - 1)):
                okFlg = False
        if okFlg:
            ok.append(a)

    if len(ok) == 0:
        print(-1)
        return
    else:
        ret = 1000000
        sum = 0
        for o in ok:
            for i in range(len(o)):
                sum += A[i][int(o[i])]
            ret = min(sum, ret)
    print(ret)
    return

def judge(a, x, y):
    if str(x) + str(y) in a:
        return False
    if str(y) + str(x) in a:
        return False
    return True



# Generated by 2.3.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [[int(next(tokens)) for _ in range(N)] for _ in range(N)]  # type: "List[List[int]]"
    M = int(next(tokens))  # type: int
    X = [int()] * (M)  # type: "List[int]"
    Y = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    solve(N, A, M, X, Y)

if __name__ == '__main__':
    main()
