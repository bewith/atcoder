#!/usr/bin/env python3
import sys


def solve(A: int, B: int, K: int):
    dp = [[0 for _ in range(B + 1)] for _ in range(A + 1)]
    dp[0][0] = 1
    for i in range(A + 1):
        for j in range(B + 1):
            if i > 0:
                dp[i][j] += dp[i - 1][j]
            if j > 0:
                dp[i][j] += dp[i][j - 1]

    ret = generate(A, B, K, dp)
    print(ret)
    return

def generate(i, j, k, dp):
    if i == 0:
        return "b" * j
    if j == 0:
        return "a" * i

    if j > 0 and k > dp[i - 1][j]:
        return "b" + generate(i, j - 1, k - dp[i - 1][j], dp)
    else:
        return "a" + generate(i - 1, j, k, dp)


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    solve(A, B, K)

if __name__ == '__main__':
    main()
